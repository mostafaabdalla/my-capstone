version : 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.4.0
  aws-ecr: circleci/aws-ecr@7.2.0


jobs:
  create-small-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''
  delay:
    executor: aws-eks/python3
    steps:
      - run:
          command: |
            sleep 240
          name: Delay deployment update

  deployment-1:
     executor: aws-eks/python3
     parameters:
       cluster-name:
         description: |
           Name of the EKS cluster
         type: string

     steps:
       - checkout
       - aws-eks/update-kubeconfig-with-authenticator:
           cluster-name: << parameters.cluster-name >>
           install-kubectl: true
       - kubernetes/create-or-update-resource:
           resource-file-path: deployment-1.yml
           resource-name: deployment/nginx-deployment-1
       - run:
           name: verify deployment works
           command: |
             kubectl get all

  lint:
     docker:
       - image: python:3.7.3-stretch
     working_directory: ~/repo
     steps:
       - checkout
       - run:
           name: install dependencies
           command: |
               python3 -m venv venv
               . venv/bin/activate
               make install
               # Install hadolint
               wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
               chmod +x /bin/hadolint
       - run:
           name: run lint
           command: |
               . venv/bin/activate
               make lint
             
  deployment-2:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string

      steps:
        - checkout
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: << parameters.cluster-name >>
            install-kubectl: true
        - kubernetes/create-or-update-resource:
            get-rollout-status: true
            resource-file-path: deployment-2.yml
            resource-name: deployment/nginx-deployment-2
        - run:
            name: verify new deployment works
            command: |
              kubectl get all
              
workflows:
  deployment:
    jobs:
        - create-small-cluster:
            cluster-name: production
        - delay:
            requires:
              - create-small-cluster
        - deployment-1:
            cluster-name: production
            requires:
              - create-small-cluster
        - lint:
            requires:
             - deployment-1
#        - aws-ecr/build-and-push-image:
#            dockerfile: Dockerfile
#            no-output-timeout: 20m
#            repo: capstone
#            region: AWS_DEFAULT_REGION
#            account-url: AWS_ECR_ACCOUNT_URL
#            aws-access-key-id: AWS_ACCESS_KEY_ID
#            aws-secret-access-key: AWS_SECRET_ACCESS_KEY
#            requires:
#              - lint
        - deployment-2:
            cluster-name: production
            requires:
              - deployment-1
              - delay
#        - delay:
#            requires:
#              - deployment-2
#        - aws-eks/delete-cluster:
#            cluster-name: production
#            requires:
#              - delay